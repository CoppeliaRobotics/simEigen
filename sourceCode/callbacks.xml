<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<?xml-stylesheet type="text/xsl" href="callbacks.xsl"?>

<plugin name="simEigen" author="federico.ferri.it@gmail.com">
    <description>
        A plugin wrapping some functions of the <a href="http://eigen.tuxfamily.org">Eigen</a> C++ library.<br />
        <br />
        It also contains a Lua class for matrix operations:<br />
        <code>
            a = simEigen.Matrix{{1, 2}, {3, 4}}
            ainv = a:pinv()
            a * ainv - simEigen.Matrix.eye(2)
        </code>
    </description>
    <command name="mtxBlock" skip-documentation="true">
        <description>Block of size (p,q), starting at (i,j). Indices start at 0. Returns a new matrix.</description>
        <params>
            <param name="handle" type="string"></param>
            <param name="i" type="int" default="0"></param>
            <param name="j" type="int" default="0"></param>
            <param name="p" type="int" default="-1"></param>
            <param name="q" type="int" default="-1"></param>
        </params>
        <return>
            <param name="handle" type="string"></param>
        </return>
    </command>
    <command name="mtxBlockAssign" skip-documentation="true">
        <description>Assign matrix 2 to block of size (p,q), starting at (i,j). Indices start at 0. Operates in place.</description>
        <params>
            <param name="handle" type="string"></param>
            <param name="handle2" type="string"></param>
            <param name="i" type="int" default="0"></param>
            <param name="j" type="int" default="0"></param>
            <param name="p" type="int" default="-1"></param>
            <param name="q" type="int" default="-1"></param>
        </params>
        <return>
        </return>
    </command>
    <command name="mtxCopy" skip-documentation="true">
        <description>Return a new matrix, copy of this one.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
            <param name="handle" type="string"></param>
        </return>
    </command>
    <command name="mtxCross" skip-documentation="true">
        <description>Performs cross-product of the two vectors. Returns a new matrix.</description>
        <params>
            <param name="handle" type="string"></param>
            <param name="handle2" type="string"></param>
        </params>
        <return>
            <param name="handle" type="string"></param>
        </return>
    </command>
    <command name="mtxDestroy" skip-documentation="true">
        <description>Destroy the matrix.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
        </return>
    </command>
    <command name="mtxDeterminant" skip-documentation="true">
        <description>Compute determinant of the matrix.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
            <param name="result" type="double"></param>
        </return>
    </command>
    <command name="mtxDot" skip-documentation="true">
        <description>Performs addition of the two matrices.</description>
        <params>
            <param name="handle" type="string"></param>
            <param name="handle2" type="string"></param>
        </params>
        <return>
            <param name="result" type="double"></param>
        </return>
    </command>
    <command name="mtxGetColData" skip-documentation="true">
        <description>Get a column of this matrix. Indices start at 0.</description>
        <params>
            <param name="handle" type="string"></param>
            <param name="j" type="int"></param>
        </params>
        <return>
            <param name="data" type="table" item-type="double"></param>
        </return>
    </command>
    <command name="mtxGetData" skip-documentation="true">
        <description>Return matrix data, in row-major order.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
            <param name="data" type="table" item-type="double"></param>
        </return>
    </command>
    <command name="mtxGetItem" skip-documentation="true">
        <description>Get an item of this matrix. Indices start at 0.</description>
        <params>
            <param name="handle" type="string"></param>
            <param name="i" type="int"></param>
            <param name="j" type="int"></param>
        </params>
        <return>
            <param name="data" type="double"></param>
        </return>
    </command>
    <command name="mtxGetRowData" skip-documentation="true">
        <description>Get a row of this matrix. Indices start at 0.</description>
        <params>
            <param name="handle" type="string"></param>
            <param name="i" type="int"></param>
        </params>
        <return>
            <param name="data" type="table" item-type="double"></param>
        </return>
    </command>
    <command name="mtxGetSize" skip-documentation="true">
        <description>Return matrix size.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
            <param name="rows" type="int"></param>
            <param name="cols" type="int"></param>
        </return>
    </command>
    <command name="mtxHorzCat" skip-documentation="true">
        <description>Concatenate matrices, returning a new matrix.</description>
        <params>
            <param name="handles" type="table" item-type="string"></param>
        </params>
        <return>
            <param name="handle" type="string"></param>
        </return>
    </command>
    <command name="mtxIMul" skip-documentation="true">
        <description>Performs multiplication of the two matrices in place (writes result to first matrix).</description>
        <params>
            <param name="handle" type="string"></param>
            <param name="handle2" type="string"></param>
        </params>
        <return>
        </return>
    </command>
    <command name="mtxKron" skip-documentation="true">
        <description>Computes kronecker product of the two matrices. Returns a new matrix.</description>
        <params>
            <param name="handle" type="string"></param>
            <param name="handle2" type="string"></param>
        </params>
        <return>
            <param name="handle" type="string"></param>
        </return>
    </command>
    <command name="mtxLinSpaced" skip-documentation="true">
        <description>Generates equally spaced values in the closed interval [low,high]. When size is set to 1, a vector of length 1 containing 'high' is returned..</description>
        <params>
            <param name="count" type="int"></param>
            <param name="low" type="double" default="1"></param>
            <param name="high" type="double" nullable="true" default="nil"></param>
        </params>
        <return>
            <param name="handle" type="string"></param>
        </return>
    </command>
    <command name="mtxMaxCoeff" skip-documentation="true">
        <description>Compute max coeff. of elements of this matrix.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
            <param name="result" type="double"></param>
        </return>
    </command>
    <command name="mtxMean" skip-documentation="true">
        <description>Compute mean of elements of this matrix.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
            <param name="result" type="double"></param>
        </return>
    </command>
    <command name="mtxMinCoeff" skip-documentation="true">
        <description>Compute min coeff. of elements of this matrix.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
            <param name="result" type="double"></param>
        </return>
    </command>
    <command name="mtxMul" skip-documentation="true">
        <description>Performs multiplication of the two matrices. Returns a new matrix.</description>
        <params>
            <param name="handle" type="string"></param>
            <param name="handle2" type="string"></param>
        </params>
        <return>
            <param name="handle" type="string"></param>
        </return>
    </command>
    <command name="mtxNew" skip-documentation="true">
        <description>Create a new matrix. If initialData is specified, fill the matrix with specified data.</description>
        <params>
            <param name="rows" type="int"></param>
            <param name="cols" type="int"></param>
            <param name="initialData" type="table" item-type="double" default="{}"></param>
        </params>
        <return>
            <param name="handle" type="string"></param>
        </return>
    </command>
    <command name="mtxNorm" skip-documentation="true">
        <description>Compute norm of this matrix.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
            <param name="result" type="double"></param>
        </return>
    </command>
    <command name="mtxNormalize" skip-documentation="true">
        <description>Normalize this matrix in place.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
        </return>
    </command>
    <command name="mtxNormalized" skip-documentation="true">
        <description>Return normalized matrix. Returns a new matrix.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
            <param name="handle" type="string"></param>
        </return>
    </command>
    <command name="mtxOp" skip-documentation="true">
        <description>Performs element-wise operation on the matrix(es). Returns a new matrix if inplace is false, otherwise writes the result into first matrix./</description>
        <params>
            <param name="handle" type="string"></param>
            <param name="op" type="int"></param>
            <param name="handle2" type="string" nullable="true" default="nil"></param>
            <param name="inplace" type="bool" default="true"></param>
        </params>
        <return>
            <param name="handle" type="string" nullable="true" default="nil"></param>
        </return>
    </command>
    <command name="mtxOpK" skip-documentation="true">
        <description>Performs element-wise operation on the matrix and the scalar. Returns a new matrix if inplace is false, otherwise writes the result into first matrix./</description>
        <params>
            <param name="handle" type="string"></param>
            <param name="op" type="int"></param>
            <param name="k" type="double"></param>
            <param name="inplace" type="bool" default="true"></param>
        </params>
        <return>
            <param name="handle" type="string" nullable="true" default="nil"></param>
        </return>
    </command>
    <command name="mtxPInv" skip-documentation="true">
        <description>Pseudo-inverse. See https://eigen.tuxfamily.org/dox/classEigen_1_1CompleteOrthogonalDecomposition.html#ab5e8b3f2c7b602772e1f1d7ce63d446e for details.</description>
        <params>
            <param name="m" type="string">
                <description>input matrix</description>
            </param>
            <param name="b" type="string" nullable="true" default="nil">
                <description>an optional vector to compute pinv(m)*b, which is more stable and efficient than right-multiplying the result by b</description>
            </param>
            <param name="damping" type="double" default="0">
                <description>damping factor. if > 0 then it will return m'*(m*m'+damping^2*I)^-1</description>
            </param>
        </params>
        <return>
            <param name="m" type="string">
                <description>pseudo-inverse of input matrix</description>
            </param>
            <param name="x" type="string" nullable="true">
                <description>the result of pinv(m)*b if b has been specified</description>
            </param>
        </return>
    </command>
    <command name="mtxProd" skip-documentation="true">
        <description>Compute product of elements of this matrix.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
            <param name="result" type="double"></param>
        </return>
    </command>
    <command name="mtxRandom" skip-documentation="true">
        <description>Create a new matrix of uniformly distributed random values in [-1..1] range.</description>
        <params>
            <param name="rows" type="int"></param>
            <param name="cols" type="int"></param>
        </params>
        <return>
            <param name="handle" type="string"></param>
        </return>
    </command>
    <command name="mtxReshaped" skip-documentation="true">
        <description>Return a reshaped version this matrix.</description>
        <params>
            <param name="handle" type="string"></param>
            <param name="rows" type="int"></param>
            <param name="cols" type="int"></param>
        </params>
        <return>
            <param name="handle" type="string"></param>
        </return>
    </command>
    <command name="mtxSetColData" skip-documentation="true">
        <description>Set a column of this matrix. Indices start at 0.</description>
        <params>
            <param name="handle" type="string"></param>
            <param name="j" type="int"></param>
            <param name="data" type="table" item-type="double"></param>
        </params>
        <return>
        </return>
    </command>
    <command name="mtxSetData" skip-documentation="true">
        <description>Set data of this matrix.</description>
        <params>
            <param name="handle" type="string"></param>
            <param name="data" type="table" item-type="double"></param>
        </params>
        <return>
        </return>
    </command>
    <command name="mtxSetItem" skip-documentation="true">
        <description>Set an item of this matrix. Indices start at 0.</description>
        <params>
            <param name="handle" type="string"></param>
            <param name="i" type="int"></param>
            <param name="j" type="int"></param>
            <param name="data" type="double"></param>
        </params>
        <return>
        </return>
    </command>
    <command name="mtxSetRowData" skip-documentation="true">
        <description>Set a row of this matrix. Indices start at 0.</description>
        <params>
            <param name="handle" type="string"></param>
            <param name="i" type="int"></param>
            <param name="data" type="table" item-type="double"></param>
        </params>
        <return>
        </return>
    </command>
    <command name="mtxSquaredNorm" skip-documentation="true">
        <description>Compute squared norm of this matrix.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
            <param name="result" type="double"></param>
        </return>
    </command>
    <command name="mtxSum" skip-documentation="true">
        <description>Compute sum of elements of this matrix.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
            <param name="result" type="double"></param>
        </return>
    </command>
    <command name="mtxSVD" skip-documentation="true">
        <description>SVD decomposition. See https://eigen.tuxfamily.org/dox/classEigen_1_1JacobiSVD.html for details.</description>
        <params>
            <param name="m" type="string">
                <description>input matrix</description>
            </param>
            <param name="computeThinU" type="bool" default="true">
                <description></description>
            </param>
            <param name="computeThinV" type="bool" default="true">
                <description></description>
            </param>
            <param name="b" type="string" nullable="true" default="nil">
                <description>an optional vector to solve for x the system m*x=b</description>
            </param>
        </params>
        <return>
            <param name="s" type="string">
                <description>singular values as a m-by-1 matrix</description>
            </param>
            <param name="u" type="string">
                <description>U matrix (left singular vectors)</description>
            </param>
            <param name="v" type="string">
                <description>V matrix (right singular vectors)</description>
            </param>
            <param name="x" type="string" nullable="true">
                <description>the x solution if b has been specified</description>
            </param>
        </return>
    </command>
    <command name="mtxTrace" skip-documentation="true">
        <description>Compute trace of this matrix.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
            <param name="result" type="double"></param>
        </return>
    </command>
    <command name="mtxTranspose" skip-documentation="true">
        <description>Transpose this matrix in place.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
    </command>
    <command name="mtxTransposed" skip-documentation="true">
        <description>Return a transposed version of this matrix.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
            <param name="handle" type="string"></param>
        </return>
    </command>
    <command name="mtxVertCat" skip-documentation="true">
        <description>Concatenate matrices, returning a new matrix.</description>
        <params>
            <param name="handles" type="table" item-type="string"></param>
        </params>
        <return>
            <param name="handle" type="string"></param>
        </return>
    </command>
    <command name="quatDestroy" skip-documentation="true">
        <description>Destroy the quaternion.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
        </return>
    </command>
    <command name="quatFromAxisAngle" skip-documentation="true">
        <description>Create a new quaternion from axis/angle.</description>
        <params>
            <param name="axisHandle" type="string"></param>
            <param name="angle" type="double"></param>
        </params>
        <return>
            <param name="handle" type="string"></param>
        </return>
    </command>
    <command name="quatFromEuler" skip-documentation="true">
        <description>Create a new quaternion from Euler angles (as a 3D vector).</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
            <param name="handle" type="string"></param>
        </return>
    </command>
    <command name="quatFromRotation" skip-documentation="true">
        <description>Create a new quaternion from rotation matrix.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
            <param name="handle" type="string"></param>
        </return>
    </command>
    <command name="quatGetData" skip-documentation="true">
        <description>Return quaternion data.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
            <param name="data" type="table" item-type="double" size="4"></param>
        </return>
    </command>
    <command name="quatInv" skip-documentation="true">
        <description>Return a new quaternion inverse of this.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
            <param name="handle" type="string"></param>
        </return>
    </command>
    <command name="quatMulQuat" skip-documentation="true">
        <description>Multiply quaternions. Returns a new quaternion if inplace is false, otherwise writes the result into first quaternion.</description>
        <params>
            <param name="handle" type="string"></param>
            <param name="handle2" type="string"></param>
            <param name="inplace" type="bool" default="true"></param>
        </params>
        <return>
            <param name="handle" type="string" nullable="true" default="nil"></param>
        </return>
    </command>
    <command name="quatMulVec" skip-documentation="true">
        <description>Rotate vector by this quaternion, returning a new vector.</description>
        <params>
            <param name="handle" type="string"></param>
            <param name="vectorHandle" type="string"></param>
        </params>
        <return>
            <param name="handle" type="string" nullable="true" default="nil"></param>
        </return>
    </command>
    <command name="quatNew" skip-documentation="true">
        <description>Create a new quaternion. If initialData is specified, fill the quaternion with specified data.</description>
        <params>
            <param name="initialData" type="table" item-type="float" size="4" default="{0,0,0,1}"></param>
        </params>
        <return>
            <param name="handle" type="string"></param>
        </return>
    </command>
    <command name="quatSetData" skip-documentation="true">
        <description>Set data of this quaternion.</description>
        <params>
            <param name="handle" type="string"></param>
            <param name="data" type="table" item-type="double" size="4"></param>
        </params>
        <return>
        </return>
    </command>
    <command name="quatSLERP" skip-documentation="true">
        <description>Compute SLERP between 2 quaternions, return a new quaternion.</description>
        <params>
            <param name="handle" type="string"></param>
            <param name="handle2" type="string"></param>
            <param name="t" type="double"></param>
        </params>
        <return>
            <param name="handle" type="string"></param>
        </return>
    </command>
    <command name="quatToAxisAngle" skip-documentation="true">
        <description>Return a axis/angle representation of the given quaternion.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
            <param name="axisHandle" type="string"></param>
            <param name="angle" type="double"></param>
        </return>
    </command>
    <command name="quatToEuler" skip-documentation="true">
        <description>Return an Euler angles representation of the given quaternion.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
            <param name="handle" type="string"></param>
        </return>
    </command>
    <command name="quatToRotation" skip-documentation="true">
        <description>Return a new 3x3 matrix corresponding to the rotation matrix of the given quaternion.</description>
        <params>
            <param name="handle" type="string"></param>
        </params>
        <return>
            <param name="handle" type="string"></param>
        </return>
    </command>
    <enum name="op" item-prefix="op_" base="540" skip-documentation="true">
        <!-- unary ops: -->
        <item name="unm"></item>
        <item name="abs"></item>
        <item name="acos"></item>
        <item name="asin"></item>
        <item name="atan"></item>
        <item name="ceil"></item>
        <item name="cos"></item>
        <item name="deg"></item>
        <item name="exp"></item>
        <item name="floor"></item>
        <item name="log"></item>
        <item name="log2"></item>
        <item name="log10"></item>
        <item name="rad"></item>
        <item name="sin"></item>
        <item name="sqrt"></item>
        <item name="tan"></item>
        <!-- binary ops: -->
        <item name="add"></item>
        <item name="sub"></item>
        <item name="times"></item>
        <item name="div"></item>
        <item name="intdiv"></item>
        <item name="mod"></item>
        <item name="min"></item>
        <item name="max"></item>
    </enum>
    <!-- OLD FUNCTIONS: -->
    <command name="svd" deprecated="true">
        <description>SVD decomposition. See https://eigen.tuxfamily.org/dox/classEigen_1_1JacobiSVD.html for details.</description>
        <params>
            <param name="m" type="grid" item-type="double" size="*,*">
                <description>input matrix</description>
            </param>
            <param name="computeThinU" type="bool" default="true">
                <description></description>
            </param>
            <param name="computeThinV" type="bool" default="true">
                <description></description>
            </param>
            <param name="b" type="grid" item-type="double" size="*,*" nullable="true" default="nil">
                <description>an optional vector to solve for x the system m*x=b</description>
            </param>
        </params>
        <return>
            <param name="s" type="grid" item-type="double" size="*,1">
                <description>singular values as a m-by-1 matrix</description>
            </param>
            <param name="u" type="grid" item-type="double" size="*,*">
                <description>U matrix (left singular vectors)</description>
            </param>
            <param name="v" type="grid" item-type="double" size="*,*">
                <description>V matrix (right singular vectors)</description>
            </param>
            <param name="x" type="grid" item-type="double" size="*,1" nullable="true">
                <description>the x solution if b has been specified</description>
            </param>
        </return>
    </command>
    <command name="pinv" deprecated="true">
        <description>Pseudo-inverse. See https://eigen.tuxfamily.org/dox/classEigen_1_1CompleteOrthogonalDecomposition.html#ab5e8b3f2c7b602772e1f1d7ce63d446e for details.</description>
        <params>
            <param name="m" type="grid" item-type="double" size="*,*">
                <description>input matrix</description>
            </param>
            <param name="b" type="grid" item-type="double" size="*,1" nullable="true" default="nil">
                <description>an optional vector to compute pinv(m)*b, which is more stable and efficient than right-multiplying the result by b</description>
            </param>
            <param name="damping" type="double" default="0">
                <description>damping factor. if > 0 then it will return m'*(m*m'+damping^2*I)^-1</description>
            </param>
        </params>
        <return>
            <param name="m" type="grid" item-type="double" size="*,*">
                <description>pseudo-inverse of input matrix</description>
            </param>
            <param name="x" type="grid" item-type="double" size="*,1" nullable="true">
                <description>the result of pinv(m)*b if b has been specified</description>
            </param>
        </return>
    </command>
</plugin>
